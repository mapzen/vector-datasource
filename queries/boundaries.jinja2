{% macro ne_boundary_cols(type) %}
    gid AS __id__,
    {% filter geometry %}the_geom{% endfilter %} AS __geometry__,
    scalerank::float,
    '{{ type }}' AS kind,
{% if type == 'country' %}
    2 AS admin_level
{% elif type == 'state' %}
    4 AS admin_level
{% else %}
    NULL AS admin_level
{% endif %}
{% endmacro %}

{% if zoom < 2 %}

SELECT
    {{ ne_boundary_cols('country') }}
FROM
    ne_110m_admin_0_boundary_lines_land
WHERE
    {{ bounds|bbox_filter('the_geom') }}

{% elif 2 <= zoom < 5 %}

SELECT
    {{ ne_boundary_cols('country') }}
FROM
    ne_50m_admin_0_boundary_lines_land
WHERE
    {{ bounds|bbox_filter('the_geom') }}

UNION ALL

SELECT
    {{ ne_boundary_cols('state') }}
FROM
    ne_50m_admin_1_states_provinces_lines
WHERE
    {{ bounds|bbox_filter('the_geom') }}

{% elif 5 <= zoom < 8 %}

SELECT
    name,
    labelrank,
    {{ ne_boundary_cols('country') }}
FROM
    ne_10m_admin_0_boundary_lines_land
WHERE
    {{ bounds|bbox_filter('the_geom') }}

UNION ALL

SELECT
    name,
    NULL AS labelrank,
    {{ ne_boundary_cols('state') }}
FROM
    ne_10m_admin_1_states_provinces_lines
WHERE
    {{ bounds|bbox_filter('the_geom') }}
    AND featurecla NOT IN ('Admin-1 statistical boundary', 'Admin-1 statistical meta bounds');

{% else %}

SELECT
  name,
  NULL AS maritime_boundary,
  admin_level,
  tags->'boundary:type' AS boundary_type,
  NULL AS kind,
  -- note that we force the RHR, which makes outers clockwise,
  -- then take the boundary, then reverse and intersect with
  -- the query bbox. this is needed because Shapely expects a
  -- correctly-oriented outer to run counter-clockwise.
  {% filter geometry %}{{ bounds|bbox_intersection('st_reverse(st_boundary(st_forcerhr(way)))') }}{% endfilter %} AS __geometry__,
  osm_id AS __id__,
  %#tags AS tags

FROM planet_osm_polygon

WHERE
  {{ bounds|bbox_filter('way') }}
  AND boundary='administrative'
  AND admin_level IN ('2', '4' {% if zoom >= 10 %}, '6', '8'{% endif %})

UNION ALL

SELECT
  NULL AS name,
  'yes' AS maritime_boundary,
  NULL AS admin_level,
  NULL AS boundary_type,
  NULL AS kind,
  {% filter geometry %}{{ bounds|bbox_intersection('the_geom') }}{% endfilter %} AS __geometry__,
  gid AS __id__,
  NULL AS tags

FROM buffered_land

WHERE
  {{ bounds|bbox_filter('the_geom') }}

{% if zoom >= 12 %}

UNION ALL

SELECT
  name,
  NULL AS maritime_boundary,
  NULL AS admin_level,
  NULL AS boundary_type,
  CASE WHEN barrier='retaining_wall' THEN 'retaining_wall'
       WHEN man_made='snow_fence' THEN 'snow_fence'
       WHEN barrier='fence' THEN 'fence'
       ELSE 'city_wall'
  END AS kind,
  {% filter geometry %}way{% endfilter %} AS __geometry__,
  osm_id AS __id__,
  %#tags AS tags

FROM
  planet_osm_line

WHERE
  {{ bounds|bbox_filter('way') }}
  AND (
    barrier='city_wall' OR historic='citywalls'
{% if zoom >= 15 %}
    OR barrier='retaining_wall'
    OR man_made='snow_fence'
{% endif %}
{% if zoom >= 16 %}
    OR barrier='fence'
{% endif %}
  )

{% endif %}

{% if zoom >= 16 %}
-- also add boundaries from polygon which have boundary=fence.

UNION ALL

SELECT
  name,
  NULL AS maritime_boundary,
  NULL AS admin_level,
  NULL AS boundary_type,
  'fence' AS kind,
  {% filter geometry %}st_boundary(way){% endfilter %} AS __geometry__,
  osm_id AS __id__,
  %#tags AS tags

FROM
  planet_osm_polygon

WHERE
  {{ bounds|bbox_filter('way') }}
  -- don't want to match any rows which are entirely inside or entirely
  -- outside the bounding box.
  AND st_intersects(st_boundary(way), {{ bounds|bbox }})
  AND barrier='fence';

{% endif %}

{% endif %}
