{% macro ne_landuse_cols(kind) %}
    gid AS __id__,
    {% filter geometry %}{{ bounds['polygon']|bbox_intersection('the_geom') }}{% endfilter %} AS __geometry__,
    {% filter geometry %}mz_label_placement{% endfilter %} AS __label__,
    json_build_object('kind', 'urban_area') AS mz_properties,
    jsonb_build_object(
      'name', '',
      'min_zoom', 4::real,
      'area', way_area::bigint,
      'source', 'naturalearthdata.com',
      'kind', 'urban_area'
    ) AS __properties__
{% endmacro %}

{% macro osm_landuse_detailed_query(table, geom_type) %}
SELECT
    osm_id AS __id__,
{% if table == 'planet_osm_polygon' %}
    {% filter geometry %}{{ bounds['polygon']|bbox_intersection('way') }}{% endfilter %} AS __geometry__,
{% elif table == 'planet_osm_line' %}
    {% filter geometry %}{{ bounds['line']|bbox_intersection('way') }}{% endfilter %} AS __geometry__,
{% else %}
    {% filter geometry %}way{% endfilter %} AS __geometry__,
{% endif %}
    {% filter geometry %}mz_label_placement{% endfilter %} AS __label__,
    mz_calculate_json_landuse(t.*) AS mz_properties,
    to_jsonb(tags) || jsonb_build_object(
      'name',
{% if table == 'planet_osm_polygon' %}
      CASE WHEN mz_poi_min_zoom IS NULL THEN tags->'name' ELSE NULL END,
{% else %}
      tags->'name',
{% endif %}
      'min_zoom', least(16, mz_landuse_min_zoom)::real,
      'area', way_area::bigint,
      'source', 'openstreetmap.org',
      'mz_is_building', mz_calculate_is_building_or_part(tags->'building', tags->'building:part')
    ) AS __properties__
FROM
    {{ table }} t
WHERE
    {{ bounds[geom_type]|bbox_filter('way',3857) }}
    {% if zoom <= 15 %}
    AND mz_landuse_min_zoom < {{ zoom + 1 }}
    {% else %}
    AND mz_landuse_min_zoom IS NOT NULL
    {% endif %}
{% endmacro %}

{% if 4 <= zoom < 6 %}

SELECT
    {{ ne_landuse_cols() }}
FROM
    ne_50m_urban_areas t
WHERE
    {{ bounds['polygon']|bbox_filter('the_geom',3857) }}

UNION ALL

SELECT
  osm_id AS __id__,
  {% filter geometry %}{{ bounds['polygon']|bbox_intersection('way') }}{% endfilter %} AS __geometry__,
  {% filter geometry %}mz_label_placement{% endfilter %} AS __label__,
  mz_calculate_json_landuse(t.*) AS mz_properties,
  to_jsonb(tags) || jsonb_build_object(
    'min_zoom', mz_landuse_min_zoom,
    'area', way_area::bigint,
    'source', 'openstreetmap.org'
  ) AS __properties__
FROM
  planet_osm_polygon t
WHERE
  {{ bounds['polygon']|bbox_filter('way',3857) }}
  AND (tags->'boundary' IN ('national_park', 'protected_area') OR tags->'leisure'='nature_reserve')
  AND mz_landuse_min_zoom < {{ zoom + 1 }}

{% elif 6 <= zoom < 8 %}

SELECT
    -- we show urban areas at 4, even if it's not from this table
    {{ ne_landuse_cols() }}
FROM
    ne_10m_urban_areas t
WHERE
    {{ bounds['polygon']|bbox_filter('the_geom',3857) }}

UNION ALL

SELECT
  osm_id AS __id__,
  {% filter geometry %}{{ bounds['polygon']|bbox_intersection('way') }}{% endfilter %} AS __geometry__,
  {% filter geometry %}mz_label_placement{% endfilter %} AS __label__,
  mz_calculate_json_landuse(t.*) AS mz_properties,
  to_jsonb(tags) || jsonb_build_object(
    'name', CASE WHEN mz_poi_min_zoom IS NULL THEN tags->'name' ELSE NULL END,
    'min_zoom', mz_landuse_min_zoom,
    'area', way_area::bigint,
    'source', 'openstreetmap.org',
    'mz_is_building', mz_calculate_is_building_or_part(tags->'building', tags->'building:part')
  ) AS __properties__
FROM
  planet_osm_polygon t
WHERE
  {{ bounds['polygon']|bbox_filter('way',3857) }}
  AND (tags->'boundary' IN ('national_park', 'protected_area') OR tags->'leisure'='nature_reserve')
  AND mz_landuse_min_zoom < {{ zoom + 1 }}

{% else %}

{{ osm_landuse_detailed_query('planet_osm_polygon', 'polygon') }}

UNION ALL

{{ osm_landuse_detailed_query('planet_osm_line', 'line') }}

{% if zoom < 10 %}
UNION ALL

-- "cross-fade" NE urban area polygons for a couple of zooms.
SELECT
  -- we show urban areas at 4, even if it's not from this table
  {{ ne_landuse_cols() }}
FROM
  ne_10m_urban_areas t
WHERE
  {{ bounds['polygon']|bbox_filter('the_geom',3857) }}
{% endif %}

{% endif %}
