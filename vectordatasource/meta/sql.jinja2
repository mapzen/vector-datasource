{% macro table_param(param, tbl) -%}
  {% if param.table == tbl or not param.table %}row.{{param.key}}::{{param.typ}}{% else %}NULL{% endif %}
{%- endmacro -%}

{%- macro table_func(func_kind, param, tbl, table_name, ret_type) -%}
DROP FUNCTION IF EXISTS mz_calculate_{{ func_kind }}_boundaries({{ table_name }});
CREATE OR REPLACE FUNCTION mz_calculate_{{ func_kind }}_boundaries({{ table_name }})
RETURNS {{ ret_type }} AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_{{ func_kind }}_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, tbl) }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;
{%- endmacro -%}

BEGIN;

-------------
-- landuse --
-------------

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse_(
{%- for param in layers['landuse']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real)
RETURNS REAL AS $$
DECLARE
  zoom REAL;
BEGIN
  zoom = mz_one_pixel_zoom(way_area);
  RETURN {{ layers['landuse']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse(
       planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse(
       planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse(
       planet_osm_line)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_landuse_(
{%- for param in layers['landuse']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real)
RETURNS JSON AS $$
BEGIN
  RETURN {{ layers['landuse']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_landuse(
       planet_osm_point)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_landuse(
       planet_osm_polygon)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_landuse(
       planet_osm_line)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------
-- pois --
----------

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_pois_(
{%- for param in layers['pois']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        osm_id bigint,
        tags hstore,
        way_area real)
RETURNS REAL AS $$
DECLARE
  zoom REAL;
BEGIN
  zoom = mz_one_pixel_zoom(way_area);
  RETURN {{ layers['pois']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_pois(
       planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_pois_(
{%- for param in layers['pois']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.osm_id,
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_pois(
       planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_pois_(
{%- for param in layers['pois']['params'] -%}
{%- if param.key == '"ele"' %}
        row.tags->'ele',
{%- else %}
        row.{{param.key}},
{%- endif -%}
{%- endfor %}
        row.osm_id,
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_pois_(
{%- for param in layers['pois']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        osm_id bigint,
        tags hstore)
RETURNS JSON AS $$
BEGIN
  RETURN {{ layers['pois']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_pois(
       planet_osm_point)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_pois_(
{%- for param in layers['pois']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.osm_id,
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_pois(
       planet_osm_polygon)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_pois_(
{%- for param in layers['pois']['params'] %}
{%- if param.key == '"ele"' %}
        row.tags->'ele',
{%- else %}
        row.{{param.key}},
{%- endif -%}
{%- endfor %}
        row.osm_id,
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-------------
-- transit --
-------------

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_transit_(
{%- for param in layers['transit']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS REAL AS $$
BEGIN
  RETURN {{ layers['transit']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_transit(
       planet_osm_line)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_transit_(
{%- for param in layers['transit']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_transit(
       planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_transit_(
{%- for param in layers['transit']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_transit_(
{%- for param in layers['transit']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS JSON AS $$
BEGIN
  RETURN {{ layers['transit']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_transit(
       planet_osm_line)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_transit_(
{%- for param in layers['transit']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_transit(
       planet_osm_polygon)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_transit_(
{%- for param in layers['transit']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------------------------------------------------------------------
-- WATER
----------------------------------------------------------------------

-- water kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS JSON AS $$
BEGIN
  RETURN {{ layers['water']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- water min_zoom "main" function

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real)
RETURNS REAL AS $$
DECLARE
  zoom REAL;
BEGIN
  zoom = mz_one_pixel_zoom(way_area);
  RETURN {{ layers['water']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- water kind table adaptors

CREATE OR REPLACE FUNCTION mz_calculate_json_water(planet_osm_polygon)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(planet_osm_line)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(planet_osm_point)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_10m_coastline)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_50m_coastline)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_110m_coastline)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_10m_ocean)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_50m_ocean)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_110m_ocean)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_10m_lakes)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_50m_lakes)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_110m_lakes)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_10m_playas)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(ne_50m_playas)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_water(water_polygons)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'shp') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- water min_zoom table adaptors

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(planet_osm_polygon);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(planet_osm_line);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(planet_osm_line)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(planet_osm_point);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_10m_coastline);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_10m_coastline)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_50m_coastline);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_50m_coastline)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_110m_coastline);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_110m_coastline)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_10m_ocean);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_10m_ocean)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_50m_ocean);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_50m_ocean)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_110m_ocean);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_110m_ocean)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_10m_lakes);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_10m_lakes)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_50m_lakes);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_50m_lakes)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_110m_lakes);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_110m_lakes)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_10m_playas);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_10m_playas)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(ne_50m_playas);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_50m_playas)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_water(water_polygons);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(water_polygons)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'shp') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------------------------------------------------------------------
-- PLACES
----------------------------------------------------------------------

-- places kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_json_places_(
{%- for param in layers['places']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS JSON AS $$
BEGIN
  RETURN {{ layers['places']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- places min_zoom "main" function

-- NOTE: this transaction including a DROP FUNCTION is here to deal with the
-- change of return type, and can be deleted after the migrations have been
-- run.
DROP FUNCTION IF EXISTS mz_calculate_min_zoom_places_(
{%- for param in layers['places']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_places_(
{%- for param in layers['places']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS REAL AS $$
BEGIN
  RETURN {{ layers['places']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- places kind table adaptors

CREATE OR REPLACE FUNCTION mz_calculate_json_places(planet_osm_point)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_places_(
{%- for param in layers['places']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_places(ne_10m_populated_places)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_places_(
{%- for param in layers['places']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- NOTE: this transaction including a DROP FUNCTION is here to deal with the
-- change of return type, and can be deleted after the migrations have been
-- run.
DROP FUNCTION IF EXISTS mz_calculate_min_zoom_places(planet_osm_point);
DROP FUNCTION IF EXISTS mz_calculate_min_zoom_places(ne_10m_populated_places);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_places(planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_places_(
{%- for param in layers['places']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_places(ne_10m_populated_places)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_places_(
{%- for param in layers['places']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------------------------------------------------------------------
-- BOUNDARIES
----------------------------------------------------------------------

-- boundaries kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_json_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS JSON AS $$
BEGIN
  RETURN {{ layers['boundaries']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- boundaries min_zoom "main" function

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS REAL AS $$
BEGIN
  RETURN {{ layers['boundaries']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- boundaries kind table adaptors

CREATE OR REPLACE FUNCTION mz_calculate_json_boundaries(planet_osm_line)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_boundaries(planet_osm_polygon)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

{{ table_func('json', param, 'ne', 'ne_110m_admin_0_boundary_lines_land', 'JSON') }}
{{ table_func('json', param, 'ne', 'ne_50m_admin_0_boundary_lines_land', 'JSON') }}
{{ table_func('json', param, 'ne', 'ne_50m_admin_1_states_provinces_lines', 'JSON') }}
{{ table_func('json', param, 'ne', 'ne_10m_admin_0_boundary_lines_land', 'JSON') }}
{{ table_func('json', param, 'ne', 'ne_10m_admin_0_boundary_lines_map_units', 'JSON') }}
{{ table_func('json', param, 'ne', 'ne_10m_admin_1_states_provinces_lines', 'JSON') }}

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_boundaries(planet_osm_line);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_boundaries(planet_osm_line)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_boundaries(planet_osm_polygon);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_boundaries(planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

{{ table_func('min_zoom', param, 'ne', 'ne_110m_admin_0_boundary_lines_land', 'REAL') }}
{{ table_func('min_zoom', param, 'ne', 'ne_50m_admin_0_boundary_lines_land', 'REAL') }}
{{ table_func('min_zoom', param, 'ne', 'ne_50m_admin_1_states_provinces_lines', 'REAL') }}
{{ table_func('min_zoom', param, 'ne', 'ne_10m_admin_0_boundary_lines_land', 'REAL') }}
{{ table_func('min_zoom', param, 'ne', 'ne_10m_admin_0_boundary_lines_map_units', 'REAL') }}
{{ table_func('min_zoom', param, 'ne', 'ne_10m_admin_1_states_provinces_lines', 'REAL') }}

----------------------------------------------------------------------
-- BUILDINGS
----------------------------------------------------------------------

-- buildings kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_json_buildings_(
{%- for param in layers['buildings']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        way_area real,
        tags hstore)
RETURNS JSON AS $$
DECLARE
  volume REAL := mz_building_height(tags->'height', tags->'building:levels') * way_area;
BEGIN
  RETURN {{ layers['buildings']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- buildings min_zoom "main" function

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_buildings_(
{%- for param in layers['buildings']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        way_area real,
        tags hstore);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_buildings_(
{%- for param in layers['buildings']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        way_area real,
        tags hstore)
RETURNS REAL AS $$
DECLARE
  volume REAL := mz_building_height(tags->'height', tags->'building:levels') * way_area;
BEGIN
  RETURN {{ layers['buildings']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_buildings(planet_osm_polygon);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_buildings(planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_buildings_(
{%- for param in layers['buildings']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.way_area,
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_buildings(planet_osm_point);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_buildings(planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_buildings_(
{%- for param in layers['buildings']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        0::real,
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_buildings(planet_osm_polygon)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_buildings_(
{%- for param in layers['buildings']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.way_area,
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_buildings(planet_osm_point)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_buildings_(
{%- for param in layers['buildings']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        0::real,
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------------------------------------------------------------------
-- ROADS
----------------------------------------------------------------------

-- roads kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_json_roads_(
{%- for param in layers['roads']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        osm_id bigint,
        name text,
        tags hstore)
RETURNS JSON AS $$
BEGIN
  RETURN {{ layers['roads']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- roads min_zoom "main" function

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_roads_(
{%- for param in layers['roads']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        osm_id bigint,
        name text,
        way geometry,
        tags hstore);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_roads_(
{%- for param in layers['roads']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        osm_id bigint,
        name text,
        way geometry,
        tags hstore)
RETURNS REAL AS $$
BEGIN
  RETURN {{ layers['roads']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_roads(planet_osm_line);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_roads(planet_osm_line)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_roads_(
{%- for param in layers['roads']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.osm_id,
        row.tags->'name',
        row.way,
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_roads(ne_10m_roads);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_roads(ne_10m_roads)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_roads_(
{%- for param in layers['roads']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.name,
        NULL,
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_roads(planet_osm_line)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_roads_(
{%- for param in layers['roads']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.osm_id,
        row.tags->'name',
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_roads(ne_10m_roads)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_roads_(
{%- for param in layers['roads']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.name,
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------------------------------------------------------------------
-- EARTH
----------------------------------------------------------------------

-- earth kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_json_earth_(
{%- for param in layers['earth']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS JSON AS $$
BEGIN
  RETURN {{ layers['earth']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- earth min_zoom "main" function

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real)
RETURNS REAL AS $$
DECLARE
  zoom REAL;
BEGIN
  zoom = mz_one_pixel_zoom(way_area);
  RETURN {{ layers['earth']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- earth kind table adaptors

CREATE OR REPLACE FUNCTION mz_calculate_json_earth(planet_osm_polygon)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_earth(planet_osm_line)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_earth(planet_osm_point)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_earth(ne_10m_land)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_earth(ne_50m_land)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_earth(ne_110m_land)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_json_earth(land_polygons)
RETURNS JSON AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_json_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'shp') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- earth min_zoom table adaptors

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_earth(planet_osm_polygon);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_earth(planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_earth(planet_osm_line);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_earth(planet_osm_line)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_earth(planet_osm_point);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_earth(planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_earth(ne_10m_land);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_earth(ne_10m_land)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_earth(ne_50m_land);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_earth(ne_50m_land)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_earth(ne_110m_land);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_earth(ne_110m_land)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

DROP FUNCTION IF EXISTS mz_calculate_min_zoom_earth(land_polygons);

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_earth(land_polygons)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_earth_(
{%- for param in layers['earth']['params'] %}
        {{ table_param(param, 'shp') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

COMMIT;
